{
	"comment": {
		"prefix": "comment",
		"body": "# --  -- #"
	},
	"dummy_data": {
		"prefix": "dummy_data",
		"body": [
			"import numpy as np",
			"import pandas as pd",
			"n = 10_000",
			"df = pd.DataFrame(",
			"    {",
			"         'x1': np.random.randint(1, 1000, n),",
			"         'x2': np.random.randint(1, 1000, n),",
			"         'x3': np.random.randint(1, 1000, n),",
			"         'x4': np.random.randint(1, 1000, n),",
			"     }",
			")"
		]
	},
	"cell": {
		"prefix": "cell",
		"body": "#%%"
	},
	"docstrings": {
		"prefix": "docstrings",
		"body": [
			"\"\"\"",
			"",
			"Parameters",
			"----------",
			"`param1 (type)`: ",
			"",
			"Return",
			"------",
			"`return`: ",
			"",
			"\"\"\""
		]
	},
	"main": {
		"prefix": "main",
		"body": "if __name__ == '__main__':"
	},
	"create cell": {
		"prefix": "cell",
		"body": "#%%"
	},
	"Create dummy dataframe": {
		"prefix": "dummy_df",
		"body": [
			"import numpy as np",
			"import pandas as pd",
			"np.random.seed(1010)",
			"n = 1_000",
			"df =  pd.DataFrame(",
			"   {",
			"        'x1': np.random.randint(1, 1_000, n),",
			"        'x2': np.random.randint(1, 1_000, n),",
			"        'x3': np.random.randint(1, 1_000, n),",
			"        'x4': np.random.randint(1, 1_000, n),",
			"        'x5': np.random.randint(1, 1_000, n),",
			"    }",
			")"
		]
	},
	"Create dummy dataframe with name": {
		"prefix": "dummy_na",
		"body": [
			"import numpy as np",
			"import pandas as pd",
			"np.random.seed(1010)",
			"n = 10_000",
			"min = 1",
			"max = 1_000",
			"step = 1",
			"",
			"df =  pd.DataFrame(",
			"{",
			"        'x1': np.random.choice(list(np.arange(min, max, step)) + [np.nan], n),",
			"        'x2': np.random.choice(list(np.arange(min, max, step)) + [np.nan], n),",
			"        'x3': np.random.choice(list(np.arange(min, max, step)) + [np.nan], n),",
			"        'x4': np.random.choice(list(np.arange(min, max, step)) + [np.nan], n),",
			"        'x5': np.random.choice(list(np.arange(min, max, step)) + [np.nan], n),",
			"        'x6': np.random.choice(list(np.arange(min, max, step)) + [np.nan], n),",
			"    }",
			")"
		]
	},
	"timer_simple": {
		"prefix": "timer_simple",
		"body": [
			"#%%",
			"from time import perf_counter",
			"from typing import Callable, Dict",
			"def timer_simple(fn: Callable, N: int = 1, name='', kwargs: Dict = None):",
			"    if not callable(fn):",
			"        raise TypeError('fn argument should be callable.')",
			"    if kwargs is None:",
			"        kwargs = {}",
			"",
			"    time_list = []",
			"    try:",
			"        for _ in range(N):",
			"            start_time = perf_counter()",
			"            fn(**kwargs)",
			"            time_list.append(perf_counter() - start_time)",
			"    finally:",
			"        if time_list:",
			"            print(f'Total time taken {name}: {sum(time_list)}')",
			"            print(f'Mean time taken {name}: {sum(time_list)/len(time_list)}')",
			"",
			"timer_simple(",
			"    fn=,",
			"    N=5,",
			"    name='',",
			"    kwargs={},",
			")"
		]
	},
	"timer": {
		"prefix": "timer",
		"body": [
			"from time import perf_counter",
			"import plotly.express as px",
			"import pandas as pd",
			"#%%",
			"T_n = 100",
			"time_list = []",
			"for _ in range(T_n):",
			"    start_time = perf_counter()",
			"    ",
			"    time_taken = perf_counter() - start_time",
			"    time_list.append(time_taken)",
			"print(f'time taken: {sum(time_list)}')",
			"time_df = pd.DataFrame({'time_taken': time_list})",
			"display(time_df.describe(()))",
			"display(px.histogram(time_df, 'time_taken'))"
		]
	},
	"axpy_docstring": {
		"prefix": "axpy_docstring",
		"body": [
			"",
			"\"\"\"",
			"Description.",
			"",
			"Parameters",
			"----------",
			":param param1: description.",
			":type param1: `type`",
			"",
			"Returns",
			"-------",
			"`type`: description.",
			"",
			"Notes",
			"-----",
			"None.",
			"      ",
			"-----",
			"\"\"\""
		]
	},
	"create_model_example": {
		"prefix": "model example",
		"body": [
			"import numpy as np",
			"import pandas as pd",
			"import lightgbm as lgbm",
			"np.random.seed(1010)",
			"n = 1_000",
			"X =  pd.DataFrame(",
			"   {",
			"        'x1': np.random.randint(1, 1_000, n),",
			"        'x2': np.random.randint(1, 1_000, n),",
			"        'x3': np.random.randint(1, 1_000, n),",
			"        'x4': np.random.randint(1, 1_000, n),",
			"        'x5': np.random.randint(1, 1_000, n),",
			"    }",
			")",
			"y = pd.Series(np.random.randint(1, 100, n), name='observed')",
			"model = lgbm.LGBMRegressor()",
			"model.fit(X, y)"
		]
	},
	"dummy_df_large": {
		"prefix": "dummy_df_large",
		"body": [
			"import numpy as np",
			"import pandas as pd",
			"np.random.seed(1010)",
			"n = 1_000",
			"colnames = [f'x{i}' for i in range(1, 101)]",
			"df =  pd.DataFrame({col: np.random.randint(1, 1_000, n) for col in colnames})",
			"",
			"df['weight'] = np.random.randint(1, 1_000, n)/1_000"
		]
	},
	"reload_code": {
		"prefix": "reload_code",
		"body": [
			"from IPython import get_ipython",
			"if get_ipython() is not None and 'IPKernelApp' in get_ipython().config:",
			"    get_ipython().run_line_magic('load_ext', 'autoreload')",
			"    get_ipython().run_line_magic('autoreload', '2') "
		]
	},
	"cProfile_decorator": {
		"prefix": "cProfile_decorator",
		"body": [
			"from typing import Callable, Dict",
			"import cProfile",
			"import io",
			"import pstats",
			"def profile(output: str):",
			"    def wrapper(func: Callable):",
			"        def inner_wrapper(*args, **kwargs):",
			"            pr = cProfile.Profile()",
			"            pr.enable()",
			"            retval = func(*args, **kwargs)",
			"            pr.disable()",
			"            s = io.StringIO()",
			"            ps = pstats.Stats(pr, stream=s)",
			"            ps.dump_stats(output)",
			"            return retval",
			"        return inner_wrapper",
			"    return wrapper"
		]
	}
}
